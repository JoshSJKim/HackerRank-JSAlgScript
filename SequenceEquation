/*
 * Complete the 'permutationEquation' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY p as parameter.
 */

function permutationEquation(p) {
    // Write your code here
let x = 1;
let newArr = [];
for (let i = 0; i < p.length; i++) {
let elem = p.indexOf(x);
x++;
newArr.push(elem+1);
}
let finalArr = [];
for (let j = 0; j < newArr.length; j++) {
  for (let y = 0; y < p.length; y++) {
    if (newArr[j] === p[y]) {
      finalArr.push(y+1);
    }
  }
}
return finalArr;
}




console.log(permutationEquation([5, 2, 1, 3, 4])); // [4, 2, 5, 1, 3]

// This code passes the test, but it seems inefficient.

function permutationEquation(p) {
  const indexMap = {};
  const result = [];

  for (let i = 0; i < p.length; i++) {
    indexMap[p[i]] = i + 1;  // +1 to adjust for zero-based indexing
  }

  for (let x = 1; x <= p.length; x++) {
    result.push(indexMap[indexMap[x]]); // retrieve value from 'indexMap' twice. First the value of key 'x', then the value of key 'x' becomes the next key 'x'
  }

  return result;
}

console.log(permutationEquation([5, 2, 1, 3, 4]));
